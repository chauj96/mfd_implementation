function [cell_struct, face_struct, vertices, cells] = buildStructureGrid(nx, nz, Lx, Lz)
    
    dx = Lx / nx;
    dz = Lz / nz;

    % create vertex list
    xv = linspace(0, Lx, nx+1);
    zv = linspace(0, Lz, nz+1);
    [X, Z] = meshgrid(xv, zv);
    X = X';
    Z = Z'; 

    amp_x = 0.0 * 0.025;        % amplitude of x-perturbation
    amp_z = 0.0 * 0.025; 
    % Perturb internal vertices only (excluding boundaries)
    for i = 2:nx    
        for j = 2:nz 
            X(i,j) = X(i,j) + amp_x * sin(4*pi * X(i,j)) * sin(4*pi * Z(i,j));
            Z(i,j) = Z(i,j) + amp_z * cos(4*pi * X(i,j)) * sin(4*pi * Z(i,j));
        end
    end

    vertices = [X(:), Z(:)];
    
    % FACE STORAGE
    face_struct = struct('cells', {}, 'normal', {}, 'center', {}, 'area', {});
    face_counter = 0;
    face_map = containers.Map;

    % CELL STORAGE
    cell_struct = struct('center', {}, 'faces', {}, 'face_dirs', {}, 'volume', {});
    cells = {};
    cell_id = 0;

    for j = 1:nz
        for i = 1:nx
            cell_id = cell_id + 1;

            % vertex IDs (counter clockwise)
            v1 = (j-1)*(nx+1) + i; % bottom left
            v2 = v1 + 1; % bottom right
            v3 = v2 + (nx+1); % top right
            v4 = v1 + (nx+1); % top left
            cells{cell_id} = [v1, v2, v3, v4];

            % cell center and area from vertices
            pts = vertices(vids, :);
            cell_struct(cell_id).center = mean(pts, 1);
            x = pts(:,1);
            z = pts(:,2);
            area = 0.5 * abs(sum(x .* circshift(z,-1)) - sum(z .* circshift(x,-1)));
            cell_struct(cell_id).volume = area;

            % add faces (edges of the polygon)
            face_ids = [];
            face_dirs = [];
            for k = 1:4
                v_start = vids(k);
                
            end
            
        end
    end





    
    % vertical faces (left-right)
    for j = 1:nz
        for i = 1:(nx+1)
            face_counter = face_counter + 1;
            x = (i - 1) * dx;
            z = (j - 1) * dz + dz / 2;
    
            face_struct(face_counter).center = [x, z];
            face_struct(face_counter).normal = [1; 0];
            face_struct(face_counter).cells = [];
            face_struct(face_counter).area = dz;
    
            key = sprintf('v_%d_%d', i, j);
            face_map(key) = face_counter;
        end
    end
    
    % horizontal faces (bottom-top)
    for j = 1:(nz+1)
        for i = 1:nx
            face_counter = face_counter + 1;
            x = (i - 1) * dx + dx / 2;
            z = (j - 1) * dz;
    
            face_struct(face_counter).center = [x, z];
            face_struct(face_counter).normal = [0; 1];
            face_struct(face_counter).cells = [];
            face_struct(face_counter).area = dx;
    
            key = sprintf('h_%d_%d', i, j);
            face_map(key) = face_counter;
        end
    end
   
    
    for j = 1:nz
        for i = 1:nx
            cell_id = cell_id + 1;
    
            xc = (i - 1) * dx + dx / 2;
            zc = (j - 1) * dz + dz / 2;
            cell_struct(cell_id).center = [xc, zc];
            cell_struct(cell_id).volume = dx * dz;
    
            % get face indices
            fL = face_map(sprintf('v_%d_%d', i, j));
            fR = face_map(sprintf('v_%d_%d', i+1, j));
            fB = face_map(sprintf('h_%d_%d', i, j));
            fT = face_map(sprintf('h_%d_%d', i, j+1));
    
            cell_struct(cell_id).faces = [fL, fR, fB, fT];
            cell_struct(cell_id).face_dirs = [-1, 1, -1, 1];
    
            % update each face's connected cells
            face_struct(fL).cells = [face_struct(fL).cells, cell_id];
            face_struct(fR).cells = [face_struct(fR).cells, cell_id];
            face_struct(fB).cells = [face_struct(fB).cells, cell_id];
            face_struct(fT).cells = [face_struct(fT).cells, cell_id];

            % polygonal cell vertices (counter clock wise)
            v1 = (j-1)*(nx+1) + i; % bottom left
            v2 = (j-1)*(nx+1) + i + 1; % bottom right
            v3 = j*(nx+1) + i + 1; % top right
            v4 = j*(nx+1) + i; % top left
            cells{cell_id} = [v1, v2, v3, v4];
        end
    end

end
